[core]
    editor = nano
    ignorecase = false
    excludesfile = ~/.gitignore
    hooksPath = ~/code/github.com/erbridge/git-pair/githooks
    # Highlight whitespace errors in git diff:
    whitespace = tabwidth=4,cr-at-eol,trailing-space,space-before-tab,indent-with-non-tab

# Anything local to this machine is kept in a separate file.
# This includes, credentials, authentication, signing, external tools.
[include]
    path = .gitconfig_local

[html]
    followRedirects = true

[init]
    defaultBranch = main

[help]
    autocorrect = 10

[status]
    submodulesummary = true

[branch]
    sort = -committerdate

[commit]
    verbose = true
    commit = scissors

[fetch]
    prune = true
    pruneTags = true
    writeCommitGraph = true

[grep]
    lineNumber = true

[tag]
    sort = -authordate

[push]
    default = simple
    rebase = true

[pull]
    rebase = merges

[rebase]
    abbreviateCommands = true
    autosquash = true
    autostash = true

[pager]
    show-branch = true
    status = true
    log = diff-highlight | less
    show = diff-highlight | less
    diff = diff-highlight | less

[interactive]
    diffFilter = diff-highlight

[stash]
    showPatch = true

[rerere]
    enabled = true

[filter "lfs"]
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f

# [merge]
#     tool = meld
#     conflictstyle = diff3

# [diff]
#     tool = meld
#     colorMoved = zebra
# #    noprefix = true

[diff]
    wsErrorHighlight = all
    conflictStyle = zdiff3

[difftool]
    prompt = false

[difftool "meld"]
    cmd = meld "$LOCAL" "$REMOTE"

[merge]
    tool = meld
    conflictStyle = zdiff3

[maintenance]
    auto = false
    strategy = incremental

#
# Colours
#

[color]
    branch = auto
    diff = auto
    status = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

#
# Aliases.
#

[alias]
    # Be nice.
    praise = blame

    # Show all aliases with 'git alias'.
    alias = config --get-regexp ^alias\\.

    # Simple, readable log.
    tree-log = log --color --graph --oneline --decorate

    # How many commits are in this branch, but not in develop?
    howmany-develop = rev-list --count develop..

    # How many commits are in this branch, but not in master?
    howmany-master = rev-list --count master..

    # How many commits are in this branch, but not in main?
    howmany-main = rev-list --count main..

    # List tasks
    tasks = grep -EI "TODO|FIXME|WRITEME"

    # Edit the last commit message.
    amend = commit --amend -C HEAD

    # Unstage a staged commit.
    unstage = !git reset HEAD

    # Show the changes that are currently unstaged.
    dc = diff --cached

    # Show the changes that are currently staged.
    ds = diff --staged

    # Show a list of branches and their commits.
    sb = show-branch

    # Find text in any commit in the repo history.
    grep-all = !"git rev-list --all | xargs git grep '$1'"

    # Show who contributed which changes.
    who = shortlog -s --

    # Lookup full name and email for any author.
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"

    # Show who contributed, in descending order by number of commits.
    whorank = shortlog -sn --no-merges

    # Stash aliases
    save = !git stash save
    pop = !git stash pop

    # Checkout
    co = checkout

# Workflow aliases - mainly from here:
#     http://haacked.com/archive/2014/07/28/github-flow-aliases/
[alias]
    # Get current branch up to date with remote
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive

    # chery-pick
    cp = cherry-pick

    # Checkout new feature branch
    cob = checkout -b

    # Commit all files
    cm = !git add -A && git commit -m

    # Save current work (with intention to undo or rebase)
    save = !git add -A && git commit -m 'SAVEPOINT'
    wip = !git add -u && git commit -m "WIP"

    # Undo last commit
    undo = reset HEAD~1 --mixed

    # Rewrite last commit
    amend = commit -a --amend --no-edit

    # Get default branch.
    default-branch = !git remote show origin | awk '/HEAD branch/ {print $NF}'

    # How many commits are in this branch, but not in the default branch?
    howmany = !git rev-list --count $(git default-branch)..

    # Delete all branches already merged into default branch
    bclean = "!f() { git branch --merged ${1-$(git default-branch)} | grep -v " ${1-$(git default-branch)}$" | xargs -r git branch -d; }; f"

    # Switch to default branch; run 'git up' to sync with remote; delete all branches already merged to default branch (with git bclean)
    bdone = "!f() { git checkout ${1-$(git default-branch)} && git up && git bclean ${1-$(git default-branch)}; }; f"

# Aliases for the git-pair plugin: https://github.com/erbridge/git-pair
[alias]
    pair = !~/code/github.com/erbridge/git-pair/bin/git-pair
    solo = !~/code/github.com/erbridge/git-pair/bin/git-solo
